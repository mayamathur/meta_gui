B
q
params = expand.grid("q"=q, "B"=B)
library(plyr)
l = apply( params, 1, function(x)
1 - pnorm( ( x['q'] - m1.hat + x['B'] * m0.hat ) / sqrt( Vhat * (x['B']^2) ) ) )
hist(l)
res = data.frame(matrix(unlist(l), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
res
head(res)
names(res) = names(l[[1]])
t = cbind( params, res )
head(t)
k = 50
m0.hat = 200
m1.hat = 300
Vhat = 100
q = 100
# ugly, inefficient way to apply function to dataframe of params
B = seq(1, 1.5, .01)  # bias factor ranges from RR=1 to RR=5
params = expand.grid("B"=B)
params = expand.grid("Bias"=B)
library(plyr)
l = apply( params, 1, function(x)
1 - pnorm( ( q - m1.hat + x['B'] * m0.hat ) / sqrt( Vhat * (x['B']^2) ) ) )
head(l)
params = expand.grid("Bias"=B)
library(plyr)
l = apply( params, 1, function(x)
1 - pnorm( ( q - m1.hat + x['Bias'] * m0.hat ) / sqrt( Vhat * (x['Bias']^2) ) ) )
head(l)
res = data.frame(matrix(unlist(l), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
names(res) = names(l[[1]])
t = cbind( params, res )
head(t)
names(t) = c("Bias", "phat")
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor (RR scale)") + ylab( "Estimated proportion of studies with true RR < 0.90" )
library(ggplot2)
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor (RR scale)") + ylab( "Estimated proportion of studies with true RR < 0.90" )
k = 50
m0.hat = 200
m1.hat = 300
Vhat = 100
q = 150
# ugly, inefficient way to apply function to dataframe of params
B = seq(1, 1.5, .01)  # bias factor ranges from RR=1 to RR=5
params = expand.grid("Bias"=B)
library(plyr)
l = apply( params, 1, function(x)
1 - pnorm( ( q - m1.hat + x['Bias'] * m0.hat ) / sqrt( Vhat * (x['Bias']^2) ) ) )
#1 - pnorm( ( 100 - 300 + 1.2 * 200 ) / sqrt( 100 * (1.2^2) ) )
res = data.frame(matrix(unlist(l), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
names(res) = names(l[[1]])
t = cbind( params, res )
names(t) = c("Bias", "phat")
# lower-truncate CI for plotting happiness
#d$lo.dm[d$lo.dm <0] = 0
# get the bias for
#threshold.q = 0.10
#threshold.bias = d$Bias[ abs(d$phat - threshold.q)  < 0.01 ]
# calculate g, confounding strength
#d$g = d$Bias + sqrt( d$Bias^2 - d$Bias )
# calculate g for each bias tick mark on X-axis
#bias = seq(1, 1.5, .1)
#g = round( bias + sqrt( bias^2 - bias ), 2 )
# simple version
library(ggplot2)
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor (RR scale)") + ylab( "Estimated proportion of studies with true RR < 0.90" )
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor") + ylab( paste( "Estimated proportion of studies with true RR < ", q ) )
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor") + ylab( paste( "Estimated proportion of studies with true effect size <", q ) )
k = 50
m0.hat = 200
m1.hat = 300
Vhat = 100
q = 90
# ugly, inefficient way to apply function to dataframe of params
B = seq(1, 1.5, .01)  # bias factor ranges from RR=1 to RR=5
params = expand.grid("Bias"=B)
library(plyr)
l = apply( params, 1, function(x)
1 - pnorm( ( q - m1.hat + x['Bias'] * m0.hat ) / sqrt( Vhat * (x['Bias']^2) ) ) )
#1 - pnorm( ( 100 - 300 + 1.2 * 200 ) / sqrt( 100 * (1.2^2) ) )
res = data.frame(matrix(unlist(l), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
names(res) = names(l[[1]])
t = cbind( params, res )
names(t) = c("Bias", "phat")
# lower-truncate CI for plotting happiness
#d$lo.dm[d$lo.dm <0] = 0
# get the bias for
#threshold.q = 0.10
#threshold.bias = d$Bias[ abs(d$phat - threshold.q)  < 0.01 ]
# calculate g, confounding strength
#d$g = d$Bias + sqrt( d$Bias^2 - d$Bias )
# calculate g for each bias tick mark on X-axis
#bias = seq(1, 1.5, .1)
#g = round( bias + sqrt( bias^2 - bias ), 2 )
# simple version
library(ggplot2)
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor") + ylab( paste( "Estimated proportion of studies with true effect size <", q ) )
q = 80
# ugly, inefficient way to apply function to dataframe of params
B = seq(1, 1.5, .01)  # bias factor ranges from RR=1 to RR=5
params = expand.grid("Bias"=B)
library(plyr)
l = apply( params, 1, function(x)
1 - pnorm( ( q - m1.hat + x['Bias'] * m0.hat ) / sqrt( Vhat * (x['Bias']^2) ) ) )
#1 - pnorm( ( 100 - 300 + 1.2 * 200 ) / sqrt( 100 * (1.2^2) ) )
res = data.frame(matrix(unlist(l), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
names(res) = names(l[[1]])
t = cbind( params, res )
names(t) = c("Bias", "phat")
# lower-truncate CI for plotting happiness
#d$lo.dm[d$lo.dm <0] = 0
# get the bias for
#threshold.q = 0.10
#threshold.bias = d$Bias[ abs(d$phat - threshold.q)  < 0.01 ]
# calculate g, confounding strength
#d$g = d$Bias + sqrt( d$Bias^2 - d$Bias )
# calculate g for each bias tick mark on X-axis
#bias = seq(1, 1.5, .1)
#g = round( bias + sqrt( bias^2 - bias ), 2 )
# simple version
library(ggplot2)
ggplot( t, aes(x=Bias, y=phat) ) + theme_bw() +
scale_y_continuous( limits=c(0,1), breaks=seq(0, 1, .1) ) +
geom_line(lwd=1.2) +
#geom_ribbon(data=d, aes(ymin=lo.dm, ymax=hi.dm), alpha=0.15) +  # CI band for main analysis model
#annotate( geom = "text", x = bias, y = 1, label = g, size = 3.5, color="black" ) +
#annotate( geom = "text", x = 1.25, y = .95, label = "Minimum strength of at least one confounding RR", size = 3.5, color="black" ) +
xlab("Bias factor") + ylab( paste( "Estimated proportion of studies with true effect size <", q ) )
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
shiny::runApp('~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/shinyTeach-master/shinyKmeans1')
library(rsconnect)
deployApp()
install.packages("rsconnect")
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='half-pass',
token='549F80AF85B1934CA31386212612DCCF',
secret='<SECRET>')
deployApp()
library(rsconnect)rsconnect::setAccountInfo(name='half-pass',                          token='549F80AF85B1934CA31386212612DCCF',                          secret='<SECRET>')deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='half-pass',
token='549F80AF85B1934CA31386212612DCCF',
secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
setwd("~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/For OSF/Tests with continuous outcome")
setwd("~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/GUI/meta_gui")
list.files()
deployApp()
setwd("~/Dropbox/Personal computer/HARVARD/YEAR 1/3. Summer 2016 Tyler research/summer_2016_code/Shiny app/GUI/meta_gui")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
res
Q
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='half-pass',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
rsconnect::setAccountInfo(name='half-pass',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='half-pass',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(rnorm(100))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rsconnect::setAccountInfo(name='half-pass',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
qnorm( (log(.9) - log(1.1)) / sqrt(.05) )
(log(.9) - log(1.1))
pnorm( (log(.9) - log(1.1)) / sqrt(.05) )
pnorm( (log(.9) - log(1.1)) / .05 )
pnorm( (log(.9) - log(1.1)) / sqrt(.05) )
?pnorm
pnorm( (log(1.1) - log(.9)) / sqrt(.05) )
pnorm( (log(.9) - log(1.1)) / sqrt(.05) )
1 - pnorm( (log(1.1) - log(1.15)) / sqrt(.05) )
pnorm( (log(.9) - log(1.1)) / sqrt(.03) )
pnorm( (log(.9) - log(1.1)) / sqrt(.06) )
pnorm( (log(.9) - log(1.1)) / sqrt(.08) )
pnorm( (log(.9) - log(1.1)) / sqrt(.1) )
pnorm( (log(1.15) - log(1.1)) / sqrt(.1) )
150*3
3000*.19
3000*.14
library(ConfoundedMeta)
cite(ConfoundedMeta)
cite("ConfoundedMeta")
?citation
citation("ggplot2")
?confounded_meta
exp(.18)
log(1.5)
exp(.3)
log(1.5)
.5 - .405
shiny::runApp()
deployApp()
library(rsconnect)
deployApp()
library(ggplot2)
library(gridExtra)
dat <- data.frame(group = factor(c("A","B","C","D","E","F","G"), levels=c("F","E","D","C","B","A","G")),
cen = c(3.1,2.0,1.6,3.2,3.6,7.6,NA),
low = c(2,0.9,0.8,1.5,2,4.2,NA),
high = c(6,4,2,6,5,14.5,NA))
theme_set(theme_bw())
theme_update(
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")
)
p <- ggplot(dat,aes(cen,group)) +
geom_point(size=5, shape=18) +
geom_errorbarh(aes(xmax = high, xmin = low), height = 0.15) +
geom_vline(xintercept = 1, linetype = "longdash") +
scale_x_continuous(breaks = seq(0,14,1), labels = seq(0,14,1)) +
labs(x="Adjusted Odds Ratio", y="")
lab <- data.frame(V0 = factor(c("A","B","C","D","E","F","G","A","B","C","D","E","F","G","A","B","C","D","E","F","G","A","B","C","D","E","F","G"),, levels=c("G","F","E","D","C","B","A")),
V05 = rep(c(1,2,3,4),each=7),
V1 = c("Occuption","Active","","Inactive","","Inactive","","Recreation","Inactive","","Active","","Inactive","","Gender","Men","Women","Men","Women","Men","Women","OR",3.1,2.0,1.6,3.2,3.6,7.6)
)
data_table <- ggplot(lab, aes(x = V05, y = V0, label = format(V1, nsmall = 1))) +
geom_text(size = 4, hjust=0, vjust=0.5) + theme_bw() +
geom_hline(aes(yintercept=c(6.5,7.5))) +
theme(panel.grid.major = element_blank(),
legend.position = "none",
panel.border = element_blank(),
axis.text.x = element_text(colour="white"),#element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_line(colour="white"),#element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")) +
labs(x="",y="") +
coord_cartesian(xlim=c(1,4.5))
grid.arrange(data_table, p, ncol=2)
p
data_table
library(ggplot2)
library(gridExtra)
dat <- data.frame(group = factor(c("A","B","C","D","E","F","G"), levels=c("F","E","D","C","B","A","G")),
cen = c(3.1,2.0,1.6,3.2,3.6,7.6,NA),
low = c(2,0.9,0.8,1.5,2,4.2,NA),
high = c(6,4,2,6,5,14.5,NA))
theme_set(theme_bw())
theme_update(
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")
)
p <- ggplot(dat,aes(cen,group)) +
geom_point(size=5, shape=18) +
geom_errorbarh(aes(xmax = high, xmin = low), height = 0.15) +
geom_vline(xintercept = 1, linetype = "longdash") +
scale_x_continuous(breaks = seq(0,14,1), labels = seq(0,14,1)) +
labs(x="Adjusted Odds Ratio", y="")
lab <- data.frame(V0 = factor(c("A","B","C","D","E","F","G","A","B","C","D","E","F","G","A","B","C","D","E","F","G","A","B","C","D","E","F","G"),, levels=c("G","F","E","D","C","B","A")),
V05 = rep(c(1,2,3,4),each=7),
V1 = c("Occuption","Active","","Inactive","","Inactive","","Recreation","Inactive","","Active","","Inactive","","Gender","Men","Women","Men","Women","Men","Women","OR",3.1,2.0,1.6,3.2,3.6,7.6)
)
data_table <- ggplot(lab, aes(x = V05, y = V0, label = format(V1, nsmall = 1))) +
geom_text(size = 4, hjust=0, vjust=0.5) + theme_bw() +
geom_hline(aes(yintercept=c(6.5,7.5))) +
theme(panel.grid.major = element_blank(),
legend.position = "none",
panel.border = element_blank(),
axis.text.x = element_text(colour="white"),#element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_line(colour="white"),#element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")) +
labs(x="",y="") +
coord_cartesian(xlim=c(1,4.5))
grid.arrange(data_table, p, ncol=2)
library(rmeta)
data(cochrane)
steroid <- meta.MH(n.trt, n.ctrl, ev.trt, ev.ctrl,
names=name, data=cochrane)
tabletext<-cbind(c("","Study",steroid$names,NA,"Summary"),
c("Deaths","(steroid)",cochrane$ev.trt,NA,NA),
c("Deaths","(placebo)", cochrane$ev.ctrl, NA,NA),
c("","OR",format(exp(steroid$logOR),digits=2),NA,format(exp(steroid$logMH),digits=2))
)
m<- c(NA,NA,steroid$logOR,NA,steroid$logMH)
l<- m-c(NA,NA,steroid$selogOR,NA,steroid$selogMH)*2
u<- m+c(NA,NA,steroid$selogOR,NA,steroid$selogMH)*2
forestplot(tabletext,m,l,u,zero=0,is.summary=c(TRUE,TRUE,rep(FALSE,8),TRUE),
clip=c(log(0.1),log(2.5)), xlog=TRUE,
col=meta.colors(box="royalblue",line="darkblue", summary="royalblue"))
install.packages("rmeta")
library(rmeta)
data(cochrane)
steroid <- meta.MH(n.trt, n.ctrl, ev.trt, ev.ctrl,
names=name, data=cochrane)
tabletext<-cbind(c("","Study",steroid$names,NA,"Summary"),
c("Deaths","(steroid)",cochrane$ev.trt,NA,NA),
c("Deaths","(placebo)", cochrane$ev.ctrl, NA,NA),
c("","OR",format(exp(steroid$logOR),digits=2),NA,format(exp(steroid$logMH),digits=2))
)
m<- c(NA,NA,steroid$logOR,NA,steroid$logMH)
l<- m-c(NA,NA,steroid$selogOR,NA,steroid$selogMH)*2
u<- m+c(NA,NA,steroid$selogOR,NA,steroid$selogMH)*2
forestplot(tabletext,m,l,u,zero=0,is.summary=c(TRUE,TRUE,rep(FALSE,8),TRUE),
clip=c(log(0.1),log(2.5)), xlog=TRUE,
col=meta.colors(box="royalblue",line="darkblue", summary="royalblue"))
library(rmeta)
data(cochrane)
steroid <- meta.MH(n.trt, n.ctrl, ev.trt, ev.ctrl,
names=name, data=cochrane)
tabletext<-cbind(c("","Study",steroid$names,NA,"Summary"),
c("Deaths","(steroid)",cochrane$ev.trt,NA,NA),
c("Deaths","(placebo)", cochrane$ev.ctrl, NA,NA),
c("","OR",format(exp(steroid$logOR),digits=2),NA,format(exp(steroid$logMH),digits=2))
)
m<- c(NA,NA,steroid$logOR,NA,steroid$logMH)
l<- m-c(NA,NA,steroid$selogOR,NA,steroid$selogMH)*2
u<- m+c(NA,NA,steroid$selogOR,NA,steroid$selogMH)*2
forestplot(tabletext,m,l,u,zero=0,is.summary=c(TRUE,TRUE,rep(FALSE,8),TRUE),
clip=c(log(0.1),log(2.5)), xlog=TRUE)
?forestplot
shiny::runApp()
deployApp()
library(rsconnect)rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
library(shiny)
library(ConfoundedMeta)
library(rsconnect)
rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
2 + sqrt(4-2)
deployApp()
install.packages("ConfoundedMeta")
install.packages("ConfoundedMeta")
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
1.42 + sqrt(1.42^2 -1.42)
shiny::runApp()
setwd("~/Dropbox/Personal computer/HARVARD/THESIS/Thesis paper #1 (Metasens)/R code/Shiny app/GUI/meta_gui_2")
library(rsconnect)
rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
432/2
483.84/2
library(rsconnect)
rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
deployApp()
deployApp()
deployApp(appName="meta_gui_2")
rsconnect::setAccountInfo(name='mmathur',     		  token='549F80AF85B1934CA31386212612DCCF', 			  secret='V3IWzJUBiFwCj7Ussc3q4XSmXjBfLJESIYdBPJQV')
rsconnect::setAccountInfo(name='mmathur',     		  token='983DF66F7A3AAF57B4C6D18B13EFF530', 			  secret='o2BWvzEsp2be1sputogtcFiiaxyzhpZX9Rhkqhe4')
deployApp(appName="meta_gui_2")
install.packages("devtools")
library(devtools)
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='mmathur',
token='983DF66F7A3AAF57B4C6D18B13EFF530',
secret='o2BWvzEsp2be1sputogtcFiiaxyzhpZX9Rhkqhe4')
deployApp()
deployApp(, appName="evalue")
deployApp(appName="evalue")
?deployApp
deployApp(account="mmathur", appName="evalue")
deployApp(account="mmathur", appName="evalue")
deployApp(account="mmathur")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='mmathur',     		  token='983DF66F7A3AAF57B4C6D18B13EFF530', 			  secret='o2BWvzEsp2be1sputogtcFiiaxyzhpZX9Rhkqhe4')
deployApp(appname="meta_gui_2")
deployApp(appName="meta_gui_2")
deployApp(account="mmathur", appName="meta_gui_2")
deployApp(account='mmathur', appName='meta_gui_2')
?deployApp
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(rsconnect)
deployApp()
deployApp(appName="meta_gui_2")
deployApp(account=mmathur, appName="meta_gui_2")
deployApp(account="mmathur", appName="meta_gui_2")
rsconnect::setAccountInfo(name='mmathur',     		  token='983DF66F7A3AAF57B4C6D18B13EFF530', 			  secret='o2BWvzEsp2be1sputogtcFiiaxyzhpZX9Rhkqhe4')
deployApp(account="mmathur", appName="meta_gui_2")
deployApp(appName="meta_gui_2")
deployApp()
shiny::runApp()
library(rsconnect)
deployApp()
deployApp(appName="meta_gui_2")
deployApp(account="mmathur",appName="meta_gui_2")
serverInfo
serverInfo()
?serverInfo
serverInfo()
deployApp(appName="meta_gui_2")
deployApp(account="mmathur",appName="meta_gui_2")
deployApp()
serverInfo()
shiny::runApp()
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
shiny::runApp()
